###################################################################################
########################## Modelo Simplicado dos ACs #############################

reset;	# apaga a memoria

# ----------------------------------------------------
# 	Modelo linearizado
# ----------------------------------------------------

# Leitura do modelo
model AC.mod;

# Dados do sistema
data AC.dat;

# Define o solver e as opções
option solver CPLEXamp;
option display_1col 0;
option display_round 4;
option display_width 1000;
option omit_zero_cols 1;
option cplex_options "mipdisplay=0 mipinterval=20 mipgap=0 probe=3"; 

# Resolve o modelo matemático do ponto de operação inicial

param saida_fo_gasto_sem_bateria{w in AC};
param saida_fo_gasto_com_bateria{w in AC};
param saida_fo_gasto_com_bateria_e_paineis{w in AC};
param saida_fo_perdas{w in AC};
param saida_fo_consumo_ac{w in AC};
param saida_fo_consumo_bat{w in AC};
param saida_fo_consumo_pfv{w in AC};
param saida_fo_consumo_aparelhos{w in AC};

# Os parâmetros (..._x) abaixo foram criados para preservar a saída de cada iteração, 
# uma vez que o modelo estava poluindo
# as variáveis já calculadas nas iterações anteriores

param carga_bateria_x{BAT,Ot,Of};
param Pac_x{AC,Ot,Of};
param Qac_x{AC,Ot,Of};
param Tin_x{AC,Ot,Of};
param Tparede_x{AC,Ot,Of};;
param Tout_x{Ot};
param mod_Pac_freq_x{AC,Ot,Of};
param mod_Qac_freq_x{AC,Ot,Of};
param mod_Pac_Tout_x{Ot};
param mod_Qac_Tout_x{Ot};
param COP_x{AC,Ot,Of};
param desconforto_x{AC,Ot,Of};

param on_off_x{AC,Ot,Of};
param frequency_ac_x{AC,Ot,Of};
param pot_bateria_x{AC,Ot,Of};
param pot_pfv_x{AC,Ot,Of};

for {w in AC} {

	let z := w;

		#solve fo_desconforto;
		#solve fo_gasto_sem_bateria;
		#solve fo_gasto_com_bateria;
		#solve fo_gasto_com_bateria_e_paineis;
		solve fo_consumo_aparelhos;
		#solve fo_perdas;

	let saida_fo_gasto_sem_bateria[z]	        			:= fo_gasto_sem_bateria;
	let saida_fo_gasto_com_bateria[z]	        			:= fo_gasto_com_bateria;
	let saida_fo_gasto_com_bateria_e_paineis[z] 			:= fo_gasto_com_bateria_e_paineis;
	let saida_fo_perdas[z] 									:= fo_perdas;
	let saida_fo_consumo_ac[z] 								:= fo_consumo_ac;
	let saida_fo_consumo_bat[z] 							:= fo_consumo_bat;
	let saida_fo_consumo_pfv[z] 							:= fo_consumo_pfv;
	let saida_fo_consumo_aparelhos[z] 						:= fo_consumo_aparelhos;

	for{t in Ot}
		{
			for {f in Of}
				{	
					
					if (Pac[w,t,f] == 0) then {
					let COP_x[w,t,f] := 0;
					}
					else{
					let COP_x[w,t,f] := Qac[w,t,f]/Pac[w,t,f];
					}

				    let desconforto_x[z,t,1] := abs(Tin[z,t,1] - Tset_casa[z]) * AC_Fase_a[z];
				    let desconforto_x[z,t,2] := abs(Tin[z,t,2] - Tset_casa[z]) * AC_Fase_b[z];
				    let desconforto_x[z,t,3] := abs(Tin[z,t,3] - Tset_casa[z]) * AC_Fase_c[z];

				    let carga_bateria_x[z,t,f] := carga_bateria[z,t,f];
				    let Pac_x[z,t,f] := Pac[z,t,f];
				    let Qac_x[z,t,f] := Qac[z,t,f];
				    let Tin_x[z,t,f] := Tin[z,t,f];
				    let Tparede_x[z,t,f] := Tparede[z,t,f];
				    let Tout_x[t] := Tout[t];
				    let on_off_x[z,t,f] := on_off[z,t,f];
				    let mod_Pac_freq_x[z,t,f] := mod_Pac_freq[z,t,f];
				    let mod_Qac_freq_x[z,t,f] := mod_Qac_freq[z,t,f];
				    let mod_Pac_Tout_x[t] := mod_Pac_Tout[t];
				    let mod_Qac_Tout_x[t] := mod_Qac_Tout[t];
				    let frequency_ac_x[z,t,f] := frequency_ac[z,t,f];
				    let pot_bateria_x[z,t,f] := pot_bateria[z,t,f];
				    let pot_pfv_x[z,t,f] := pot_pfv[z,t,f];

				}
		}

}

data AC_saidas.dat;

printf "Arquivos Criados!!!\n";
printf "Tempo de Execucao: %f minutos \n", _solve_elapsed_time/60;

